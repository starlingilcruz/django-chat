name: open-chat CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    name: Open Chat Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: openchat_test
          POSTGRES_USER: openchat
          POSTGRES_PASSWORD: openchat
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -e ".[dev]"

      - name: Lint with ruff
        run: ruff check .

      - name: Check formatting with black
        run: black --check .

      - name: Check import sorting with isort
        run: isort --check-only .

      - name: Run tests
        env:
          DJANGO_SECRET_KEY: test-secret-key-for-ci
          DEBUG: "False"
          POSTGRES_DB: openchat_test
          POSTGRES_USER: openchat
          POSTGRES_PASSWORD: openchat
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          REDIS_URL: redis://localhost:6379/0
          DJANGO_SETTINGS_MODULE: openchat.settings.test
        run: |
          pytest --cov=. --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  deploy:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install EB CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region = ${{ secrets.AWS_REGION }}" >> ~/.aws/config

      - name: Deploy to EB
        run: |
          eb init ${{ secrets.EB_APPLICATION_NAME }} \
            --platform python-3.11 \
            --region ${{ secrets.AWS_REGION }}
          eb use ${{ secrets.EB_ENVIRONMENT_NAME }}
          eb deploy --verbose

      - name: Check deployment status
        if: success()
        run: |
          echo "âœ… Deployment successful!"
          echo "Environment: ${{ secrets.EB_ENVIRONMENT_NAME }}"
          eb status
